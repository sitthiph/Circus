Circus
(Your Task)

Welcome, Welcome, Welcome ladies and gentlemen and children of all ages!  The circus is in town and wow are there some
doozies in it!  We have everything to thrill and amaze you from the bearded woman to the flying –olini’s.  Come one and
all as they defy gravity in the heavens, tame ferocious lions, dive into glasses of water, sort multiple arrays, and
even use pointers in an octopus style to simulate an alphabetic and numeric sorted list!  Yes, it is truly amazing.

Your mission is to design a program that does the following:

(1) 	You are to read in from the file CircusEmployees.txt all the employees information.  It is broken up into the
emplyoee’s name (first, last, and midInitial [# if none] ).  Also, you are to read in their social security number
(idNum), their category, and their title.  For example:

   Marques Paul J                    012-345-678           Entertainer            	Ring _Master

 	(Note: NO titles can be changed or a goose egg for a grade will be your result, especially
                         the Ring Master!)

(2)  With this list you are to do the following from the Menu( ):

(1)     Print list alphabetically
(2)     Print list by IdNum
(3)     Insert new Employee
(4) 	Delete an Employee
(5) 	Print only a particular category list of employees alphabetically
(6) 	Print entire list of all employees by category alphabetically
(7) 	Add a category
(8) 	Delete a category (and ALL corresponding employees)
(9) 	Quit

What is your selection:



Your Task:
ON PAPER  (1 page for each selection) CLEARLY design what this structure would look like.  How would you design the
nodes? How would you design the layout, meaning all the references/pointers whether that be arrays, linked lists,
Stacks/Queues, Trees, etc?  How would they correspond to one another?  How would you insert and delete nodes? Which is
the best structure and why? Also, what are some of the alternatives? What is the Big-O of your design?  [O(n) for time efficiency]

Check List :

(1) Done // Goes alphabetically, meaning that A-Z -> a-z;
(2) DOne
(3) Done // NOT PROOF AGAINST  < or > 6;
(9) Done